@using System.IO
@using BlazorInputFile

<div class="my-component">
    <InputFile OnChange="HandleSelection" />
</div>

@if (ShowStatus)
{
    <p>@status</p>
}

@code {

    string status;


    async Task HandleSelection(IFileListEntry[] files)
    {
        // locals
        UploadedFileInfo uploadedFileInfo = null;
        bool abort = false;

        var file = files.FirstOrDefault();
        if (file != null)
        {
            try
            {
                // the partialGuid is need to ensure uniqueness
                string partialGuid = Guid.NewGuid().ToString().Substring(0, PartialGuidLength);

                // create the uploadedFileInfo
                uploadedFileInfo = new UploadedFileInfo(file, partialGuid);

                // if the file is too large
                if ((MaxFileSize > 0) && (file.Size > MaxFileSize))
                {
                    // Show the FileTooLargeMessage
                    status = FileTooLargeMessage;

                    // Upload was aborted
                    uploadedFileInfo.Aborted = true;
                    uploadedFileInfo.ErrorMessage = FileTooLargeMessage;
                    uploadedFileInfo.Exception = new Exception("The file uploaded was too large.");
                }
                else
                {
                    // Create a new instance of a 'FileInfo' object.
                    FileInfo fileInfo = new FileInfo(file.Name);

                    // Set the extension. The ToLower is for just in case. I don't know if it's even possible for an extension to be upper case
                    uploadedFileInfo.Extension = fileInfo.Extension.ToLower();

                    // if FilterByExtension is true and the AllowedExtensions text exists
                    if ((FilterByExtension) && (!string.IsNullOrWhiteSpace(AllowedExtensions)))
                    {
                        // If the allowed extensions
                        abort = !AllowedExtensions.ToLower().Contains(fileInfo.Extension);
                    }

                    // Set aborted to true
                    uploadedFileInfo.Aborted = abort;

                    // if we should continue
                    if (!abort)
                    {
                        // Just load into .NET memory to show it can be done
                        // Alternatively it could be saved to disk, or parsed in memory, or similar
                        var ms = new MemoryStream();
                        await file.Data.CopyToAsync(ms);

                        // save the file using the FullName (If AppendPartialGuid is still true, than the Name.PartialGuid is the FullName
                        using (FileStream fileStream = new FileStream(Path.Combine(UploadFolder, uploadedFileInfo.FullName), FileMode.Create, FileAccess.Write))
                        {
                            ms.WriteTo(fileStream);
                        }

                        // if there is a CustomSave
                        if (!String.IsNullOrWhiteSpace(CustomSuccessMessage))
                        {
                            // Show the CustomSuccessMessage
                            status = CustomSuccessMessage;
                        }
                        else
                        {
                            // set the status
                            status = $"Saved file {file.Size} bytes from {file.Name}";
                        }
                    }
                    else
                    {
                        // If a CustomExtensionMessage has been set
                        if (!string.IsNullOrWhiteSpace(CustomExtensionMessage))
                        {
                            // Display the Custom extension doesn't validate message
                            uploadedFileInfo.ErrorMessage = CustomExtensionMessage;
                        }
                        else
                        {
                            // Can't think of a better message than this yet, just woke up
                            uploadedFileInfo.ErrorMessage = "The file uploaded is an invalid extension.";
                        }

                        // Show the exception
                        uploadedFileInfo.Exception = new Exception(uploadedFileInfo.ErrorMessage);
                    }
                }
            }
            catch (Exception error)
            {
                // Upload was aborted
                uploadedFileInfo.Aborted = true;

                // Store the Exception
                uploadedFileInfo.Exception = error;

                // if a CustomErrorMessage is set
                if (!String.IsNullOrWhiteSpace(CustomErrorMessage))
                {
                    // Show the custom error message
                    status = CustomErrorMessage;
                }
                else
                {
                    // show the full error
                    status = error.ToString();
                }

                // set the error message
                uploadedFileInfo.ErrorMessage = status;
            }
            finally
            {
                // Notify the caller the upload was aborted due to an error 
                FileUploaded(uploadedFileInfo);
            }
        }
    }

    private void FileUploaded(UploadedFileInfo uploadedFileInfo)
    {
        // Notify the client a file was uploaded
        OnChange.InvokeAsync(uploadedFileInfo);
    }

    [Parameter] public EventCallback<UploadedFileInfo> OnChange { get; set; }

    [Parameter]
    public string AllowedExtensions { get; set; } = "";

    [Parameter]
    public bool AppendPartialGuid { get; set; } = true;

    [Parameter]
    public string CustomErrorMessage { get; set; } = "An error occurred uploading your file.";

    [Parameter]
    public string CustomExtensionMessage { get; set; } = "";

    [Parameter]
    public string CustomSuccessMessage { get; set; } = "";

    [Parameter]
    public string FileTooLargeMessage { get; set; } = "The file uploaded is too large";

    [Parameter]
    public bool FilterByExtension { get; set; } = false;

    [Parameter]
    public long MaxFileSize { get; set; } = 0;

    [Parameter]
    public int PartialGuidLength { get; set; } = 12;

    [Parameter]
    public bool ShowStatus { get; set; } = true;

    [Parameter]
    public string UploadFolder { get; set; } = "wwwroot/Upload/";

}


